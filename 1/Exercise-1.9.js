/*
    Each of the following two functions defines a method for adding
    two positive integers in terms of the functions inc, which increments
    its argument by 1, and dec, which decrements its argument by 1.
*/

// 1
function plus(a, b){
    return a === 0 ? b :
    inc(plus(dec(a), b))
}

// 2
function plus(a, b) {
    return a === 0 ? b :
    plus(dec(a), inc(b))
}

/*
    Using the substitution model, illustrate the process 
    generated by each function in evaluating (4, 5):
        1:
            inc(plus(dec(4), 5))
            inc(plus(3, 5))
            inc(inc(plus(dec(3), 5)))
            inc(inc(plus(2, 5)))
            inc(inc(inc(plus(dec(2), 5))))
            inc(inc(inc(plus(1, 5))))
            inc(inc(inc(inc(plus(dec(1), 5)))))
            inc(inc(inc(inc(plus(0, 5)))))
            inc(inc(inc(inc(5))))
            inc(inc(inc(6)))
            inc(inc(7))
            inc(8)
            9

        2:
            plus(dec(4), inc(5)))
            plus(3, 6)
            plus(dec(3), inc(6))
            plus(2, 7)
            plus(dec(2), inc(7))
            plus(1, 8)
            plus(dec(1), inc(8))
            plus(0, 9)
            9


    Are these processes iterative or recursive?

    1:
        This process is recursive. We can see that process builds a chain of 
        deferred operations that are performed once the base case is hit. The shape
        of it is also a giveaway (it expands and then contracts when the base case is hit).
    
    2:
        This process is iterative. It has a fixed number of state variables that update 
        from state to state. The shape also remains the same as it moves through the process.   
*/

